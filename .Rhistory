select
account_id
, bus_email_flag
, start_date
, end_date
, (tech_info * 2) as tech_info
from
ti_acct),
-- Number of active apps
number_of_apps as (
select
account_id
, created_at::date
, count(distinct app_id) as number_of_active_apps
from
(
select
account_id
, app_id
, created_at
, max_connections
, all_messages
, case when max_connections >= 5 and all_messages >= 100 then 1 else 0 end as active_flag
from
daily_logs
where
case when max_connections >= 5 and all_messages >= 100 then 1 else 0 end = 1 and
created_at between now() - interval '60 days' and now()
order by
account_id
, app_id) as foo
group by
account_id
, created_at),
-- Recode raw count to a flag
app_active as (
select
account_id
, created_at
, case when number_of_active_apps > 0 then 1 else 0 end as active_app
from
number_of_apps),
na_accts as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, max(case when na.created_at between ba.start_date and ba.end_date then na.active_app else 0 end) as active_app
from
bus_accts_with_dates ba
left join
app_active na
on
ba.account_id = na.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
active_app_weight as (
select
account_id
, bus_email_flag
, start_date
, end_date
, (active_app * 2) as active_app
from
na_accts),
-- Multiple environments
multiple_envs as (
select
ac.account_id
, ac.created_at::date
, max(case when ac.multiple_environments is not null then 1 else 0 end) as multiple_env_flag
from
app_created ac
where
created_at between now() - interval '60 days' and now()
group by
ac.account_id
,ac.created_at
),
me_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, max(case when mef.created_at between ba.start_date and ba.end_date then mef.multiple_env_flag else 0 end) as multiple_env_flag
from
bus_accts_with_dates ba
left join
multiple_envs mef
on
ba.account_id = mef.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
me_acct_weight as (
select
account_id
, bus_email_flag
, start_date
, end_date
, multiple_env_flag
from
me_acct
order by
account_id
),
-- Number of collaborators
collaborators as (
select
account_id
, created_at::date
, count(distinct collaborator_email) as collaborators
from
app_collaborator_added
where
created_at between now() - interval '60 days' and now()
group by
account_id
, created_at
),
-- Join onto main table
col_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, sum(case when cbi.created_at between ba.start_date and ba.end_date then cbi.collaborators else 0 end) as collaborators
from
bus_accts_with_dates ba
left join
collaborators cbi
on
ba.account_id = cbi.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
-- Recode collaborators to flag and weight
collaborator_weight as (
select
account_id
, bus_email_flag
, start_date
, end_date
, case when collaborators > 0 then 1 else 0 end as collaborators
from
col_acct
order by
account_id),
-- Tutorial views
tutorial_views as (
SELECT
channels_usage.id  AS account_id,
page_views.created_at::date as created_at,
COUNT(DISTINCT CASE WHEN (page_views.web_asset = 'tutorials') THEN page_views.id  ELSE NULL END) AS tutorials_views
FROM LOOKER_SCRATCH.", channels.table , " AS channels_usage
FULL OUTER JOIN LOOKER_SCRATCH.", splash.page.views.table, " AS page_views ON (page_views.account_id::int) = channels_usage.id
FULL OUTER JOIN LOOKER_SCRATCH.", web.sessions.table , " AS web_sessions ON web_sessions.account_id = channels_usage.id
WHERE (page_views.user_agent <> 'Pusher Web Analytics Bot' and (DATE(page_views.created_at )) <= now()::date) AND ((((channels_usage.created_at ) >= ((now() - interval '60 days')::date/*'2017-12-01'*/) AND (channels_usage.created_at ) < (now()::date/*'2018-01-28'*/)))) AND (web_sessions.session_created_at < web_sessions.account_created_at or web_sessions.account_created_at is null)
GROUP BY 1, 2
ORDER BY 2 DESC),
-- Join onto main table
tv_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, sum(case when tv.created_at between ba.start_date and ba.end_date then tv.tutorials_views else 0 end) as tutorial_views
from
bus_accts_with_dates ba
left join
tutorial_views tv
on
ba.account_id = tv.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
-- How many docs views does each account have?
docs_pv as (
SELECT
channels_usage.id             AS account_id,
page_views.created_at::date as created_at,
COUNT(DISTINCT page_views.id) AS page_views_count
FROM LOOKER_SCRATCH.", channels.table , " AS channels_usage
FULL OUTER JOIN LOOKER_SCRATCH.", splash.page.views.table , " AS page_views
ON (page_views.account_id :: INT) = channels_usage.id
FULL OUTER JOIN  LOOKER_SCRATCH.", web.sessions.table," AS web_sessions
ON web_sessions.account_id = channels_usage.id
WHERE (page_views.user_agent <> 'Pusher Web Analytics Bot' AND (DATE(page_views.created_at)) <= now() :: DATE) AND
((((channels_usage.created_at) >= ((now() - interval '60 days')::date) AND
(channels_usage.created_at) < (now())))) AND
(((rtrim(page_views.url, '/')) LIKE '%docs%')) AND
(web_sessions.session_created_at < web_sessions.account_created_at OR
web_sessions.account_created_at IS NULL)
GROUP BY 1, 2
ORDER BY 2 DESC
),
-- Join onto main table
doc_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, sum(case when dp.created_at between ba.start_date and ba.end_date then dp.page_views_count else 0 end) as docs_page_views
from
bus_accts_with_dates ba
left join
docs_pv dp
on
ba.account_id = dp.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
-- Join tutorial and doc pageviews
tv_doc_accts as (
select
ta.account_id
, ta.bus_email_flag
, ta.start_date
, ta.end_date
, ta.tutorial_views
, da.docs_page_views
from
tv_acct ta
full join
doc_acct da
on
ta.account_id = da.account_id
and
ta.bus_email_flag = da.bus_email_flag
and
ta.start_date = da.start_date
and
ta.end_date = da.end_date),
-- Recode to pageview flag and weight
doc_acct_weight as (
select
account_id
, bus_email_flag
, start_date
, end_date
, case when ((tutorial_views > 0 or docs_page_views > 1) or (tutorial_views > 0 and docs_page_views > 1)) then 1 else 0 end as tut_doc_pv
from
tv_doc_accts),
-- Connections soft limit accounts for past 60 days
connections_soft_limit_mon as (
select
account_id
, created_at::date as created_at
from
connections_soft_limit
where
created_at between now() - interval '60 days' and now()
group by
account_id
, created_at),
-- Connections soft limit (binary flag)
csl_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, max(case when cs.created_at between ba.start_date and ba.end_date then 1 else 0 end) as con_soft_limit_flag
from
bus_accts_with_dates ba
left join
connections_soft_limit_mon cs
on
ba.account_id = cs.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
),
-- Messages soft limit accounts for past 30 days
messages_soft_limit_mon as (
select
account_id
, created_at::date
from
messages_soft_limit
where
created_at between now() - interval '60 days' and now()
group by
account_id
, created_at),
-- Messages soft limit (binary flag)
mes_acct as (
select
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date
, max(case when mes.created_at between ba.start_date and ba.end_date then 1 else 0 end) as mes_soft_limit_flag
from
bus_accts_with_dates ba
left join
messages_soft_limit_mon mes
on
ba.account_id = mes.account_id
group by
ba.account_id
, ba.bus_email_flag
, ba.start_date
, ba.end_date),
-- Join connection and messages soft limits
con_mes_lim as (
select
ca.account_id
, ca.bus_email_flag
, ca.start_date
, ca.end_date
, ca.con_soft_limit_flag
, mes.mes_soft_limit_flag
from
csl_acct ca
full join
mes_acct mes
on
ca.account_id = mes.account_id
and
ca.bus_email_flag = mes.bus_email_flag
and
ca.start_date = mes.start_date
and
ca.end_date = mes.end_date),
-- Recode to limit flag
soft_limit_weight as (
select
account_id
, bus_email_flag
, start_date
, end_date
, case when ((con_soft_limit_flag > 0 or mes_soft_limit_flag > 1) or (con_soft_limit_flag > 0 and mes_soft_limit_flag > 1)) then 1 else 0 end as hit_soft_limit
from
con_mes_lim),
-- Join all weighted tables and sum to obtain historical score
-- Layer weighted tables
-- Dashboard and engagement
hist_comp_weight as
(select
db.account_id
, db.bus_email_flag
, db.start_date
, db.end_date
, db.dashboard_daily_pageviews
, coalesce(ef.engagement_frequency, 0) as engagement_frequency
, coalesce(naw.number_of_named_apps, 0) as number_of_named_apps
, coalesce(tw.tech_info, 0) as tech_info
, coalesce(aaw.active_app, 0) as active_app
, coalesce(mew.multiple_env_flag, 0) as multiple_env_flag
, coalesce(cw.collaborators, 0) as collaborators
, coalesce(daw.tut_doc_pv, 0) as tut_doc_pv
, coalesce(slw.hit_soft_limit, 0) as hit_soft_limit
from
db_weight db
left join
eng_weight ef
on
db.account_id = ef.account_id
and
db.bus_email_flag = ef.bus_email_flag
and
db.start_date = ef.start_date
and
db.end_date = ef.end_date
left join
named_apps_weight naw
on
db.account_id = naw.account_id
and
db.bus_email_flag = naw.bus_email_flag
and
db.start_date = naw.start_date
and
db.end_date = naw.end_date
left join
ti_weight tw
on
db.account_id = tw.account_id
and
db.bus_email_flag = tw.bus_email_flag
and
db.start_date = tw.start_date
and
db.end_date = tw.end_date
left join
active_app_weight aaw
on
db.account_id = aaw.account_id
and
db.bus_email_flag = aaw.bus_email_flag
and
db.start_date = aaw.start_date
and
db.end_date = aaw.end_date
left join
me_acct_weight mew
on
db.account_id = mew.account_id
and
db.bus_email_flag = mew.bus_email_flag
and
db.start_date = mew.start_date
and
db.end_date = mew.end_date
left join
collaborator_weight cw
on
db.account_id = cw.account_id
and
db.bus_email_flag = cw.bus_email_flag
and
db.start_date = cw.start_date
and
db.end_date = cw.end_date
left join
doc_acct_weight daw
on
db.account_id = daw.account_id
and
db.bus_email_flag = daw.bus_email_flag
and
db.start_date = daw.start_date
and
db.end_date = daw.end_date
left join
soft_limit_weight slw
on
db.account_id = slw.account_id
and
db.bus_email_flag = slw.bus_email_flag
and
db.start_date = slw.start_date
and
db.end_date = slw.end_date),
hist_scores as (
select
account_id
, bus_email_flag
, start_date
, end_date
, (dashboard_daily_pageviews) + (engagement_frequency) + (number_of_named_apps)
+ (tech_info) + (active_app) + multiple_env_flag + collaborators
+ tut_doc_pv + hit_soft_limit as total
from hist_comp_weight),
-- Add email id
hist_score_email as (
select
hs.account_id
, ac.email
, hs.bus_email_flag
, hs.start_date
, hs.end_date
, hs.total as score
from
hist_scores hs
left join
account ac
on
hs.account_id = ac.id),
-- Scale scores
scaled_hist_score as (
select
account_id
, email
, bus_email_flag
, start_date
, end_date
, (score * 2) as score
from
hist_score_email
)
select * from scaled_hist_score
;", sep = ""))
return(hist.scores)
}
DataCache::data.cache(
function(){
list(
hist.scores = fetch.hist()
)
},
cache.name = 'hist.scores'
)
?data.cache
DataCache::data.cache(
function(){
list(
hist.scores = fetch.hist()
)
},
cache.name = 'hist.scores'
)
library(DataCache)
